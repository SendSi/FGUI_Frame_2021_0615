---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by SendSi.....菜单栏Tools/动态更新Lua/打开            ( [打开]是灰色的就对了)
--- DateTime: 2022/8/28 13:54
---


--递归更新_G里的所有value
local replaceAllRef = function(oldChunk, newChunk)
    if not oldChunk then
        return
    end
    --
    --for memberName, member in pairs(newChunk) do
    --    if type(member) == 'function' then
    --        local oldMember = oldChunk[memberName]
    --        if type(oldMember) == 'function' then
    --            local oldUpvals = {}
    --            for i = 1, math.huge do
    --                local upvalName, upval = debug.getupvalue(oldMember, i)
    --                if upvalName == nil or upvalName == "" then
    --                    break
    --                end
    --                oldUpvals[upvalName] = upval
    --            end
    --            for i = 1, math.huge do
    --                local upvalName, upval = debug.getupvalue(member, i)
    --                if upvalName == nil or upvalName == "" then
    --                    break
    --                end
    --                if upval == nil or type(upval) == 'table' and table.maxn(upval) == 0 then
    --                    upval = oldUpvals[upvalName]
    --                    debug.setupvalue(member, i, upval)
    --                end
    --            end
    --        end
    --    end
    --end

    local checkedTable = {}
    local checkedFunc = {}
    local checkedUserdata = {}

    local checkTable, checkFunc, checkUserdata
    checkTable = function(table)
        if checkedTable[table] then
            return
        end
        checkedTable[table] = true

        local mt = getmetatable(table)
        if mt ~= nil then
            if mt == oldChunk then
                setmetatable(table, newChunk)
            else
                checkTable(mt)
            end
        end

        for key, value in pairs(table) do
            if type(key) == 'table' then
                if key == oldChunk then
                    table[oldChunk] = nil
                    table[newChunk] = value
                else
                    checkTable(key)
                end
            elseif type(key) == 'function' then
                checkFunc(key)
            elseif type(key) == 'userdata' then
                checkUserdata(key)
            end

            if type(value) == 'table' then
                if value == oldChunk then
                    table[key] = newChunk
                else
                    checkTable(value)
                end
            elseif type(value) == 'function' then
                checkFunc(value)
            elseif type(value) == 'userdata' then
                checkUserdata(value)
            end
        end
    end

    checkFunc = function(func)
        if checkedFunc[func] then
            return
        end
        checkedFunc[func] = true

        local upvalName, upval
        for i = 1, math.huge do
            upvalName, upval = debug.getupvalue(func, i)
            if upvalName == nil or upvalName == "" then
                break
            end

            if upval == oldChunk then
                debug.setupvalue(func, i, newChunk)
            elseif type(upval) == 'table' then
                checkTable(upval)
            elseif type(upval) == 'userdata' then
                checkUserdata(upval)
            end
        end
    end

    checkUserdata = function(userdata)
        if checkedUserdata[userdata] then
            return
        end
        checkedUserdata[userdata] = true

        local mt = getmetatable(userdata)
        if mt ~= nil then
            if mt == oldChunk then
                setmetatable(userdata, newChunk)
            else
                checkTable(mt)
            end
        end

        local peer = tolua.getpeer(userdata)
        if peer ~= nil then
            checkTable(peer)
        end
    end

    checkTable(_G)

    table.clear(checkedTable)
    table.clear(checkedFunc)
    table.clear(checkedUserdata)
end



function LuaHotMethod(filename)
    print("start hf: ",filename)
    local oldModule
    if package.loaded[filename] then
        oldModule = package.loaded[filename]
        package.loaded[filename] = nil
    else
        print('this file never loaded: ',filename)
        return
    end
    local ok,err = pcall(require, filename)
    if not ok then
        package.loaded[filename] = oldModule
        print('reload lua file failed.',err)
        return
    end

    local newModule = package.loaded[filename]


    local updated_tables = {}
    update_table(newModule, oldModule,updated_tables)

    replaceAllRef(oldModule,newModule)
    print('hf succeed :' .. filename)
    package.loaded[filename] = newModule
end

function update_func(new_func, old_func)
    assert("function" == type(new_func))
    assert("function" == type(old_func))

    -- Get upvalues of old function.
    local old_upvalue_map = {}
    for i = 1, math.huge do
        local name, value = debug.getupvalue(old_func, i)
        if not name or name == "" then break end
        old_upvalue_map[name] = value
    end

    -- Update new upvalues with old.
    for i = 1, math.huge do
        local name, value = debug.getupvalue(new_func, i)
        if not name or name == "" then break end
        --loginfo('set up value: name:',name)
        local old_value = old_upvalue_map[name]
        if old_value then
            debug.setupvalue(new_func, i, old_value)
        end  
    end 
end

function update_table(new_table, old_table, updated_tables)
    assert("table" == type(new_table))
    assert("table" == type(old_table))
    
    -- Compare 2 tables, and update old table.
    for key, value in pairs(new_table) do
        local old_value = old_table[key]
        local type_value = type(value)
        if type_value == "function" then
            update_func(value, old_value)
            new_table[key] = value
        elseif type_value == "table" then
            if ( updated_tables[value] == nil ) then
                updated_tables[value] = true
                update_table(value, old_value,updated_tables)
            end
        end
    end 

    -- Update metatable.
    local old_meta = debug.getmetatable(old_table)
    local new_meta = debug.getmetatable(new_table)
    if type(old_meta) == "table" and type(new_meta) == "table" then
        update_table(new_meta, old_meta,updated_tables)
    end
end
